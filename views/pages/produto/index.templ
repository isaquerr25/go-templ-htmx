package produto

import (
"fmt"
"github.com/isaquerr25/go-templ-htmx/views/templates"
"time"
)

type ProductProps struct {
ID uint `form:"id"`
Name string `form:"name"`
Quantity float64 `form:"quantity"`
Remaining float64 `form:"remaining"`
Unit string `form:"unit"`
Date time.Time `form:"date"`
TotalCost float64 `form:"totalCost"`
Description string `form:"description"`
Error map[string]string
}

templ Index(p ProductProps) {
@templates.Base() {
<div class="max-w-[50rem] mx-auto mt-[5rem]">
	<h1 class="text-xl font-bold mb-4">Cadastro de Produto</h1>
	<form if p.ID !=0 { hx-post={ fmt.Sprintf("/updateProduct/%d", p.ID) } } else { hx-post="/createProduct" }
		hx-target="main" hx-select="main" hx-swap="outerHTML" class="space-y-4">
		<!-- Nome -->
		<div>
			<label for="name" class="block font-medium">Nome</label>
			<input id="name" value={ p.Name } type="text" name="name" placeholder="Ex: Fertilizante A" required
				class="w-full p-2 border rounded" />
			if e, ok := p.Error["Name"]; ok {
			<p class="text-red-500">{ e }</p>
			}
		</div>
		<!-- Quantidade total -->
		<div>
			<label for="quantity" class="block font-medium">Quantidade Total</label>
			<input id="quantity" value={ fmt.Sprintf("%.3f", p.Quantity) } type="number" name="quantity"
				placeholder="Ex: 100.000" required step="0.001" class="w-full p-2 border rounded" />
			if e, ok := p.Error["Quantity"]; ok {
			<p class="text-red-500">{ e }</p>
			}
		</div>
		<!-- Quantidade restante -->
		<div>
			<label for="remaining" class="block font-medium">Quantidade Restante</label>
			<input id="remaining" value={ fmt.Sprintf("%.3f", p.Remaining) } type="number" name="remaining"
				placeholder="Ex: 25.500" required step="0.001" class="w-full p-2 border rounded" />
			if e, ok := p.Error["Remaining"]; ok {
			<p class="text-red-500">{ e }</p>
			}
		</div>
		<!-- Unidade -->
		<div>
			<label for="unit" class="block font-medium">Unidade</label>
			<select id="unit" name="unit" class="w-full p-2 border rounded">
				<option selected?={ p.Unit=="Litros" } value="Litros">Litros</option>
				<option selected?={ p.Unit=="Quilos" } value="Quilos">Quilos</option>
			</select>
			if e, ok := p.Error["Unit"]; ok {
			<p class="text-red-500">{ e }</p>
			}
		</div>
		<!-- Data -->
		<div>
			<label for="date" class="block font-medium">Data</label>
			<input id="date" value={ p.Date.Format("2006-01-02") } type="date" name="date" required
				class="w-full p-2 border rounded" />
			if e, ok := p.Error["Date"]; ok {
			<p class="text-red-500">{ e }</p>
			}
		</div>
		<!-- Custo total -->
		<div>
			<label for="totalCost" class="block font-medium">Custo Total (R$)</label>
			<input id="totalCost" value={ fmt.Sprintf("%.2f", p.TotalCost) } type="number" name="totalCost" step="0.01"
				placeholder="Ex: 500.00" required class="w-full p-2 border rounded" />
			if e, ok := p.Error["TotalCost"]; ok {
			<p class="text-red-500">{ e }</p>
			}
		</div>
		<!-- Descrição -->
		<div>
			<label for="description" class="block font-medium">Descrição</label>
			<textarea id="description" name="description" placeholder="Informações adicionais sobre o produto"
				class="w-full p-2 border rounded">{ p.Description }</textarea>
			if e, ok := p.Error["Description"]; ok {
			<p class="text-red-500">{ e }</p>
			}
		</div>
		<!-- Botão principal -->
		<button type="submit" class="w-full bg-blue-500 text-white p-2 rounded">
			if p.ID == 0 {
			Cadastrar
			} else {
			Atualizar
			}
		</button>
		<!-- Botão de remover -->
		if p.ID != 0 {
		<button type="button" class="w-full bg-red-500 text-white p-2 rounded">
			Remover
		</button>
		}
	</form>
</div>
}
}
