package irrigation

import (
	"fmt"
	"github.com/isaquerr25/go-templ-htmx/views/pages/client"
	"github.com/isaquerr25/go-templ-htmx/views/pages/planting"
	"github.com/isaquerr25/go-templ-htmx/views/templates"
	"time"
)

type IrrigationProps struct {
	ID         uint      `form:"id"`
	PlantingID uint      `form:"plantingId"`
	Type       string    `form:"type"` // drip, sprinkler, etc.
	StartedAt  time.Time `form:"startedAt"`
	Duration   int       `form:"duration"` // in minutes
	Error      map[string]string
}

type IrrigationDateCreateProps struct {
	ClientProps   []client.ClientProps     `form:"client"`
	PlantingProps []planting.PlantingProps `form:"planting"`
}

type IrrigationListProps struct {
	Items []IrrigationProps
}

templ Index(p IrrigationProps, plan []planting.PlantingProps) {
	@templates.Base() {
		<div class="max-w-[50rem] mx-auto mt-[5rem]">
			<h1 class="text-xl font-bold mb-4">
				if p.ID == 0 {
					Cadastro
				} else {
					Atualização
				}
				de Irrigação
			</h1>
			<form
				if p.ID !=0 {
					hx-post={ fmt.Sprintf("/irrigation/update/%d", p.ID) }
				} else {
					hx-post="/irrigation/create"
				}
				hx-target="body"
				hx-swap="outerHTML"
				class="space-y-4"
			>
				<!-- Planting ID -->
				<div class="space-y-1">
					<label for="plantingId" class="block font-medium">ID do Plantio</label>
					<select name="plantingId" required class="w-full p-2 border rounded">
						<option value="">Selecione um campo</option>
						for _, f := range plan {
							<option value={ fmt.Sprintf("%d", f.ID) } selected={ f.ID == p.PlantingID }>
								{ f.CropName } ID:{ f.ID }
							</option>
						}
					</select>
					if p.Error["PlantingID"] != "" {
						<p class="text-sm text-red-500">{ p.Error["PlantingID"] }</p>
					}
				</div>
				<!-- Tipo -->
				<div>{ p.Type }</div>
				<div class="space-y-1">
					<label for="type" class="block font-medium">Tipo de Irrigação</label>
					<select id="type" name="type" class="w-full p-2 border rounded">
						<option selected?={ p.Type=="drip" } value="drip">Gotejamento</option>
						<option selected?={ p.Type=="sprinkler" } value="sprinkler">Aspersão</option>
						<option selected?={ p.Type=="manual" } value="manual">Manual</option>
					</select>
					<!-- Se desejar validar o campo "type", adicione aqui também -->
				</div>
				<!-- StartedAt -->
				<div class="space-y-1">
					<label for="startedAt" class="block font-medium">Início da Irrigação</label>
					<input
						id="startedAt"
						value={ p.StartedAt.Format("2006-01-02T15:04") }
						type="datetime-local"
						name="startedAt"
						class="w-full p-2 border rounded"
					/>
					if p.Error["StartedAt"] != "" {
						<p class="text-sm text-red-500">{ p.Error["StartedAt"] }</p>
					}
				</div>
				<!-- Botão -->
				<button type="submit" class="w-full bg-blue-500 text-white p-2 rounded">
					if p.ID == 0 {
						Cadastrar
					} else {
						Atualizar
					}
				</button>
			</form>
		</div>
	}
}

templ List(p IrrigationListProps) {
	@templates.Base() {
		<div class="max-w-[50rem] mx-auto mt-[5rem]">
			<h1 class="text-xl font-bold mb-4">Irrigações</h1>
			<a href="/irrigation/create" class="block w-full bg-green-500 text-white text-center p-2 rounded mb-4">
				Nova Irrigação
			</a>
			<ul class="space-y-4">
				for _, item := range p.Items {
					<li class="border p-4 rounded flex justify-between items-center">
						<div>
							<p class="text-sm text-gray-500">
								Tipo: { item.Type } – Início: { item.StartedAt.Format("02/01/2006 15:04") } – Duração: { 
					item.Duration } min
							</p>
						</div>
						<div class="flex items-center gap-2">
							<a
								href={ templ.SafeURL(fmt.Sprintf("/irrigation/%d", item.ID)) }
								class="text-blue-600 hover:underline"
							>Editar</a>
							<button
								hx-delete={ templ.URL(fmt.Sprintf("/irrigation/%d", item.ID)) }
								hx-target="closest li"
								hx-swap="outerHTML swap:1s"
								hx-confirm="Tem certeza que deseja excluir esta irrigação?"
								class="text-red-600 hover:underline"
								hx-on:htmx:afterRequest="location.reload()"
							>
								Excluir
							</button>
							<!-- Botão para abrir o modal -->
							<button
								attr:onclick={ fmt.Sprintf("document.getElementById('modal-irrigation-%d').showModal()",
					item.ID) }
								class="text-gray-700 underline"
							>
								Ver Detalhes
							</button>
						</div>
					</li>
					<!-- Modal (escondido por padrão) -->
					<dialog id={ fmt.Sprintf("modal-irrigation-%d", item.ID) } class="rounded-lg p-4 backdrop:bg-black/40">
						<h2 class="text-lg font-bold mb-2">Detalhes da Irrigação #{ item.ID }</h2>
						<!-- Conteúdo a ser carregado dinamicamente -->
						<div
							hx-get={ templ.URL(fmt.Sprintf("/irrigation/%d/details", item.ID)) }
							hx-trigger="revealed"
							hx-target="this"
							class="text-sm text-gray-600"
						>
							Carregando...
						</div>
						<!-- Botão para fechar -->
						<form method="dialog" class="mt-4 text-right">
							<button class="bg-gray-200 px-4 py-1 rounded hover:bg-gray-300">Fechar</button>
						</form>
					</dialog>
				}
			</ul>
		</div>
	}
}
